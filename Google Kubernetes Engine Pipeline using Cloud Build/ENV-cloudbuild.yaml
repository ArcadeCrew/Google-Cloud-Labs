# Copyright 2018 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# [START cloudbuild-delivery]
steps:
# This step deploys the new version of our container image
# in the hello-cloudbuild Kubernetes Engine cluster.
# 'kubernetes.yaml' is expected to be at the root, pushed by the CI pipeline.
- name: 'gcr.io/cloud-builders/kubectl'
  id: Deploy
  args:
  - 'apply'
  - '-f'
  - 'kubernetes.yaml'
  env:
  - 'CLOUDSDK_COMPUTE_REGION=REGION-' # This will be replaced by your script
  - 'CLOUDSDK_CONTAINER_CLUSTER=hello-cloudbuild'

# Access the id_github file from Secret Manager, and setup SSH.
# This step assumes 'known_hosts.github' is present in the root of the 'hello-cloudbuild-env' repository.
- name: 'gcr.io/cloud-builders/git'
  secretEnv: ['SSH_KEY']
  entrypoint: 'bash'
  args:
  - -c
  - |
    echo "$$SSH_KEY" >> /root/.ssh/id_rsa
    chmod 400 /root/.ssh/id_rsa
    cp known_hosts.github /root/.ssh/known_hosts
  volumes:
  - name: 'ssh'
    path: /root/.ssh

# This step copies the applied manifest to the production branch.
# The COMMIT_SHA variable is automatically replaced by Cloud Build
# and refers to the commit on the 'candidate' branch that triggered this build.
- name: 'gcr.io/cloud-builders/git' # Using the git builder for git operations
  id: Copy to production branch
  entrypoint: 'bash'
  volumes: # Mount the SSH volume for git push
  - name: 'ssh'
    path: /root/.ssh
  args:
  - '-c'
  - |
    set -x
    # The current working directory is the root of the 'hello-cloudbuild-env' checkout.
    # No 'cd' needed as the redundant clone step has been removed.
    
    # Configure Git user for the commit.
    # The user will be the service account running this Cloud Build trigger.
    git config user.name "Cloud Build"
    git config user.email "$(gcloud auth list --filter=status:ACTIVE --format='value(account)')"

    # Fetch the latest state of the production branch from the remote repository (GitHub).
    git fetch origin production

    # Checkout the 'production' branch.
    # -B creates the branch if it doesn't exist locally, or resets it to origin/production if it does.
    # This ensures we're working on an up-to-date local 'production' branch.
    git checkout -B production origin/production

    # Retrieve the 'kubernetes.yaml' file from the specific commit ($COMMIT_SHA)
    # on the 'candidate' branch that triggered this build.
    # This command places that version of 'kubernetes.yaml' into the current working
    # directory (which is now the 'production' branch).
    git checkout $COMMIT_SHA kubernetes.yaml

    # Stage the 'kubernetes.yaml' file for commit.
    git add kubernetes.yaml

    # Commit the 'kubernetes.yaml' file to the local 'production' branch.
    # The commit message includes the SHA and the original commit message from the 'candidate' branch.
    git commit -m "Manifest from commit $COMMIT_SHA
    Original commit message from candidate: $(git log --format=%B -n 1 $COMMIT_SHA)"

    # Push the changes from the local 'production' branch to the remote 'production' branch on GitHub.
    git push origin production

availableSecrets:
  secretManager:
  - versionName: projects/${PROJECT_NUMBER}/secrets/ssh_key_secret/versions/1 # ${PROJECT_NUMBER} is typically substituted by Cloud Build or your script
    env: 'SSH_KEY'

# [END cloudbuild-delivery]
options:
  logging: CLOUD_LOGGING_ONLY
